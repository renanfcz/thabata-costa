// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ClientStatus {
  ACTIVE
  DISABLE
}

enum PaymentType {
  MONEY
  PIX
  DEBIT
  CREDIT
}

enum SessionStatus {
  SCHEDULED
  CANCELED
  FINISHED
}

enum SocialMedia {
  FACEBOOK
  INSTAGRAM
}

enum KnowUs {
  FACEBOOK
  INSTAGRAM
  INDICATION
}

model User {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  email     String
  nickname  String
  password  String
  createdAt DateTime @default(now())

  @@map("user")
}

model Client {
  id            String       @id @default(cuid()) @map("_id")
  name          String
  cpf           String
  dateBirth     DateTime
  celphone      String
  state         String
  city          String
  street        String?
  number        Int?
  complement    String?
  indications   Indication[]
  createdAt     DateTime     @default(now())
  knowUs        KnowUs?
  recommendedBy String?
  socialMedia   SocialMedia?
  socialMediaId String?
  sales         Sale[]
  clientStatus  ClientStatus @default(ACTIVE)
  anamnesis     Anamnesis[]

  @@map("clients")
}

model Indication {
  id            String       @id @default(cuid()) @map("_id")
  name          String
  celphone      String
  socialMedia   SocialMedia?
  socialMediaId String?
  client        Client?      @relation(fields: [clientId], references: [id])
  clientId      String?

  @@map("indication")
}

model Protocol {
  id           String     @id @default(cuid()) @map("_id")
  protocolName String
  protocolDesc String
  sale         Sale?      @relation(fields: [saleId], references: [id])
  saleId       String?
  saleItems    SaleItem[]

  @@map("protocol")
}

model Sale {
  id          String      @id @default(cuid()) @map("_id")
  protocols   Protocol[]
  client      Client?     @relation(fields: [clientId], references: [id])
  clientId    String?
  createdAt   DateTime    @default(now())
  paymentType PaymentType

  @@map("sale")
}

model SaleItem {
  id          String    @id @default(cuid()) @map("_id")
  procedure   Procedure @relation(fields: [procedureId], references: [id])
  procedureId String
  value       Float
  discount    Float
  sessionsNum Int
  protocol    Protocol? @relation(fields: [protocolId], references: [id])
  protocolId  String?
  sessions    Session[]

  @@map("saleItem")
}

model Procedure {
  id        String     @id @default(cuid()) @map("_id")
  name      String     @unique
  price     Float
  color     String
  saleItems SaleItem[]

  @@map("procedures")
}

model Session {
  id         String        @id @default(cuid()) @map("_id")
  initDate   DateTime
  finalDate  DateTime
  obs        String?
  status     SessionStatus @default(SCHEDULED)
  saleItem   SaleItem      @relation(fields: [saleItemId], references: [id])
  saleItemId String

  @@map("sessions")
}

model Anamnesis {
  id           String    @id @default(cuid()) @map("_id")
  protocolType String
  client       Client    @relation(fields: [clientId], references: [id])
  clientId     String
  createdAt    DateTime  @default(now())
  signedIn     DateTime?
  signature    String?
  expriresIn   DateTime?
  data         Json

  @@map("anamnesis")
}
